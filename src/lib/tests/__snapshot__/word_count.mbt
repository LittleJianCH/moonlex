

// translate from https://ohama.github.io/ocaml/ocamllex-tutorial/examples/wordcount/


let __mbtlex_engine_count: @x/lex.Engine = { graph: [[(0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, [])], [(2, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (5, [[], []]), (4, [[], []]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (5, [[], []]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]]), (3, [[0], [-1]])], [(2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (0, []), (0, []), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (0, []), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]])], [(2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (0, []), (0, []), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (0, []), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]]), (2, [[0], [-1]])], [(0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, [])], [(0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, []), (0, [])]], end_nodes: [None, Some((3, [])), Some((1, [((0, 0), (1, 0))])), Some((1, [((0, 0), (1, 0))])), Some((0, [])), Some((2, []))], start_tags: [0], code_blocks_n: 4 }
fn count( lines :  Int, words :  Int, chars :  Int , lexbuf : @x/lex.Lexbuf ) ->  (Int, Int, Int)  {
 match __mbtlex_engine_count.run(lexbuf) {
 (0, __mbtlex_captures) => {
  count(lines + 1, words, chars + 1, lexbuf) 
 }
 (1, __mbtlex_captures) => {
 let word: Bytes = __mbtlex_captures[0]
 
      let new_chars = chars + word.length()
      count(lines, words + 1, new_chars, lexbuf)
    
 }
 (2, __mbtlex_captures) => {
  count(lines, words, chars + 1, lexbuf) 
 }
 (3, __mbtlex_captures) => {
  (lines, words, chars) 
 }
 _ => abort("lex: fail to match")
 }
 }


fn main {
    let str = b"Hi\nWelcome to MoonbitLex\n"
    let lexbuf = @x/lex.Lexbuf::from(str)
    println("Word count result: \{count(lexbuf)}")
  }
